// -*- LSST-C++ -*-
/*
 * LSST Data Management System
 * Copyright 2012-2017 LSST Corporation.
 *
 * This product includes software developed by the
 * LSST Project (http://www.lsst.org/).
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the LSST License Statement and
 * the GNU General Public License along with this program.  If not,
 * see <http://www.lsstcorp.org/LegalNotices/>.
 */
#ifndef LSST_QSERV_QUERY_QUERYTEMPLATE_H
#define LSST_QSERV_QUERY_QUERYTEMPLATE_H
/**
  * @file
  *
  * @author Daniel L. Wang, SLAC
  */

// System headers
#include <memory>
#include <string>
#include <vector>

namespace lsst {
namespace qserv {
namespace query {

// Forward
class ColumnRef;
class TableRefAux;

/// QueryTemplate
///
/// @brief QueryTemplate stores a query representation that is a sequence of
/// mostly-concrete tokens. It contains minimal structural information except
/// what is necessary to vary queries for different partitions.
///
/// A query template is an intermediate stage between a fully-structured
/// semantic-preserving query representation (i.e., SelectStmt) and generated
/// query (a plain std::string). The purpose of the intermediate stage is to
/// provide a representation that can be manipulated quickly to generate batches
/// of queries that only differ in certain, fixed locations.

/// Query templates are constructed by appending tokens to a stream. Concrete
/// queries are generated by applying a mapping to the template and performing
/// substitutions at certain locations.

/// History:
/// QueryTemplate replaces the string-based Substitution class that was used to
/// perform fast chunk substitutions in generating queries.
///
/// The Substition/SqlSubstitution model employed a single template
/// string along with an index to the string regions that were
/// substitutable. Callers provided a mapping (i.e., {Object ->
/// Object_2031, Object_s2 -> Object_2031_232} ) that was used to
/// perform the subsitution. The representation was fairly compact, but relied
/// on string manipulation with structural information limited to indexes and
/// extents.
///
class QueryTemplate {
public:
    using Vect = std::vector<QueryTemplate>;

    /// An abstract entry in a query template
    class Entry {
    public:
        using Ptr = std::shared_ptr<Entry>;
        virtual ~Entry() {}
        virtual std::string getValue() const = 0;
        /// isDynamic signals whether the entry is concrete or substitutable.
        virtual bool isDynamic() const { return false; }
    };

    typedef std::vector<Entry::Ptr> EntryPtrVector;

    class StringEntry : public Entry {
    public:
        StringEntry(std::string const& s_) : s(s_) {}
        virtual std::string getValue() const { return s; }
        std::string s;
    };
    class TableEntry : public Entry {
    public:
        TableEntry(std::string const& db_, std::string const& table_)
            : db(db_), table(table_) {}
        virtual std::string getValue() const;
        virtual bool isDynamic() const { return true; }
        std::string db;
        std::string table;
    };
    /// An abstract mapping from entry to entry
    class EntryMapping {
    public:
        virtual ~EntryMapping() {}
        virtual Entry::Ptr mapEntry(Entry const& e) const = 0;
    };

    QueryTemplate() {}

    void append(std::string const& s);
    void append(ColumnRef const& cr);
    void append(Entry::Ptr const& e);

    /** Return a string representation of the object
     *
     * Used to generate Qserv internal queries (i.e. chunk queries, parallel queries, ...)
     *
     * @return a string representation of the object.
     *
     */
    std::string sqlFragment() const;

    /** Output operator for QueryTemplate
     *
     *  Can be used for logging, of debugging
     *
     *  @param os: std::ostream which will contain object output.
     *  @param queryTemplate: QueryTemplate to output.
     *  @return std::ostream containing output.
     */
    friend std::ostream& operator<<(std::ostream& os, QueryTemplate const& queryTemplate);

    std::string generate(EntryMapping const& em) const;
    void clear();

    template <class T>
    static std::ostream& renderDbg(std::ostream& os, T const& t) {
        QueryTemplate qt;
        t.renderTo(qt);
        return os << qt.sqlFragment();
    }

private:
    EntryPtrVector _entries;
};

}}} // namespace lsst::qserv::query

#endif // LSST_QSERV_QUERY_QUERYTEMPLATE_H
