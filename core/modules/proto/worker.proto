/*
 * LSST Data Management System
 * Copyright 2011-2015 LSST Corporation.
 *
 * This product includes software developed by the
 * LSST Project (http://www.lsst.org/).
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the LSST License Statement and
 * the GNU General Public License along with this program.  If not,
 * see <http://www.lsstcorp.org/LegalNotices/>.
 */
/// worker.proto
/// This defines the wire-messages sent between czar and worker.

package lsst.qserv.proto;

// Query message sent to worker
// One of these Task objects should be sent.
message TaskMsg {
    optional int64 session = 1;
    // Future: might have multiple db/chunk dependencies.
    optional string db = 2;
    optional int32 chunkid = 3;
    // repeated string scantables = 4;  // obsolete
    optional string user = 6;
    optional int32 protocol = 7; // Null or 1: original mysqldump, 2: row-based result
    optional int32 scanpriority = 8;
    message Subchunk {
        optional string database = 1; // database (unused)
        repeated DbTbl dbtbl = 2; // subchunked tables
        repeated int32 id = 3; // subchunk ids
        message DbTbl {
            required string db = 1;
            required string tbl = 2;
       }
    }
    message Fragment {
        // A query fragment without "CREATE or INSERT".
        // Worker should synthesize.
        repeated string query = 1;
        optional string resulttable = 3;
        optional Subchunk subchunks = 4; // Only needed with subchunk-ed queries

        // Each fragment may only write results to one table,
        // but multiple fragments may write to the same table,
        // in which case the table contains a concatenation of the
        // contributing fragments' rows.
    }
    repeated Fragment fragment = 5;
    message ScanTable {
        required string db = 1;
        required string table = 2;
        required bool lockInMemory = 3;
        required int32 scanRating = 4;
    }
    repeated ScanTable scantable = 9;
    required uint64 queryid = 10;
    required int32 jobid = 11;
    required bool scaninteractive = 12;
    required int32 attemptcount = 13;
}

// Result message received from worker
// One of these headers is sent, if the czar requests result bundling.
// If sent, an int64 size (network-byte-ordered) is always sent before
// the ResultHeader message, indicating the size of the ResultHeader
// object.
// The Header message contains size information so each result can be
// distinguished.
// This message must be 255 characters or less, because its size is
// transmitted as an unsigned char.
message ProtoHeader {
    optional fixed32 protocol = 1;
    required sfixed32 size = 2; // protobufs discourages messages > megabytes
    optional bytes md5 = 3;
    optional string wname = 4;
    required bool largeresult = 5;
}

message ColumnSchema {
    optional string name = 1; // Optional to allow type-only transmission
    required bool deprecated_hasdefault = 2; // DEPRECATED (but 'required', so will have to continue to be set)
    optional bytes deprecated_defaultvalue = 3; // DEPRECATED
    required string sqltype = 4;
    optional int32 mysqltype = 5;
}
message RowSchema {
    repeated ColumnSchema columnschema = 1;
}
message RowBundle {
    repeated bytes column = 1; // bytes to allow BLOB encoding
    repeated bool isnull = 2; // Flag to allow sending nulls.
}

message Result {
    required bool continues = 1; // Are there additional Result messages
    optional int64 session = 2;
    required RowSchema rowschema = 3;
    optional int32 errorcode = 4;
    optional string errormsg = 5;
    repeated RowBundle row = 6;
    required uint64 queryid = 7;
    required int32 jobid = 8;
    required bool largeresult = 9;
    required uint32 rowcount = 10;
    required uint64 transmitsize = 11;
    required int32 attemptcount = 12;
}

// Result protocol 2:
// Byte 0: N = unsigned char size of ProtoHeader
// Byte 1-N: ProtoHeader message
// Byte N+1, extent = ProtoHeader.size, Result msg
// (successive Result msgs indicated by size markers in previous Result msgs)


////////////////////////////////////////////////////////////////
// Protocol definition for the worker management commands
//
// ATTENTION: each message sent or received must be preceeded by
// an int32 size (network-byte-ordered) word carrying a size
// of the message.
////////////////////////////////////////////////////////////////

// All requests sent to worker management resources should start with
// sending this message carrying an identifier of a command. Specific
// commands may require additional parameters which should be sent as
// separate messages (of the corresponding types).
//
message WorkerCommandH {

    // Types of commands
    enum Command {

        // Return back a value passed as an input parameters
        // The command is meant for testing the protocol
        TEST_ECHO = 1;

        // Add a group of collocated chunks
        ADD_CHUNK_GROUP = 2;

        // Remove a group of collocated chunks
        REMOVE_CHUNK_GROUP = 3;

        // Update (rebuild and/or reload) the list of available chunks
        UPDATE_CHUNK_LIST = 4;

        // Return a list of chunks known to a worker
        GET_CHUNK_LIST = 5;

        // Set a new list of chunks
        SET_CHUNK_LIST = 6;
    }
    required Command command = 1;
}

// This message must be sent after the command header to provide
// a service with a value to be echoed back in response to
// the 'TEST_ECHO' command.
//
message WorkerCommandTestEchoM {

    // An input string to be returned back by the service
    required string value = 1;
}

// The message to be sent back in response to the 'TEST_ECHO' command
//
message WorkerCommandTestEchoR {

    // Completion status of the operation
    enum Status {
        SUCCESS = 1;    // successful completion of a request
        ERROR   = 2;    // an error occurred during command execution
    }
    required Status status = 1;

    // Optional error message (depending on the status)
    optional string error = 2 [default = ""];

    // The original value returned by the operation
    required string value = 3;
}

// The message type embedded into the relevant contexts below
//
message WorkerCommandChunk {
    required string db        = 1;
    required uint32 chunk     = 2;
    optional uint32 use_count = 3 [default = 0];    // depends on a context
}

// This message must be sent after the command header for the 'ADD_CHUNK_GROUP'
// or 'REMOVE_CHUNK_GROUP' command to tell the service which chunks needs to be
// added or removed.
//
message WorkerCommandChunkGroupM {

   required uint32 chunk = 1;
   repeated string dbs   = 2;

   optional bool force = 3 [ default = false];
}

// The message to be sent back in response to the 'ADD_CHUNK_GROUP'
// or 'REMOVE_CHUNK_GROUP' commands.
//
message WorkerCommandChunkGroupR {

    // Completion status of the operation
    enum Status {
        SUCCESS = 1;    // successful completion of a request
        INVALID = 2;    // invalid parameters of the request
        IN_USE  = 3;    // request is rejected because one of the chunks is in use
        ERROR   = 4;    // an error occurred during command execution
    }
    required Status status = 1;

    // Optional error message (depending on the status)
    optional string error = 2 [default = ""];
}

// This message must be sent after the command header for the 'UPDATE_CHUNK_LIST'
// command
//
message WorkerCommandUpdateChunkListM {

    // Rebuild the list from actual tables existing in the database
    required bool rebuild = 1;

    // Reload the new list into a worker
    required bool reload = 2;
}

// The message to be sent back in response to the 'UPDATE_CHUNK_LIST'
// command.
//
message WorkerCommandUpdateChunkListR {

    // Completion status of the operation
    enum Status {
        SUCCESS = 1;    // successful completion of a request
        ERROR   = 2;    // an error occurred during command execution
    }
    required Status status = 1;

    // Optional error message (depending on the status)
    optional string error = 2 [default = ""];

    repeated WorkerCommandChunk added   = 3;   // chunks which have been added
    repeated WorkerCommandChunk removed = 4;   // chunks which have been removed
}

// The message to be sent back in response to the 'GET_CHUNK_LIST'
// command.
//
message WorkerCommandGetChunkListR {

    // Completion status of the operation
    enum Status {
        SUCCESS = 1;    // successful completion of a request
        ERROR   = 2;    // an error occurred during command execution
    }
    required Status status = 1;

    // Optional error message (depending on the status)
    optional string error = 2 [default = ""];

    repeated WorkerCommandChunk chunks = 3;
}

// This message must be sent after the command header for the 'SET_CHUNK_LIST'
// to tell the service which chunks needs to be set.
//
message WorkerCommandSetChunkListM {

    repeated WorkerCommandChunk chunks = 1;

    optional bool force = 2 [ default = false];
}

// The message to be sent back in response to the 'SET_CHUNK_LIST'
// command.
//
message WorkerCommandSetChunkListR {

    // Completion status of the operation
    enum Status {
        SUCCESS = 1;    // successful completion of a request
        INVALID = 2;    // invalid parameters of the request
        IN_USE  = 3;    // request is rejected because one of the chunks is in use
        ERROR   = 4;    // an error occurred during command execution
    }
    required Status status = 1;

    // Optional error message (depending on the status)
    optional string error = 2 [default = ""];

    // The previous list of chunks
    repeated WorkerCommandChunk chunks = 3;
}
